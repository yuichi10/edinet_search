package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	"github.com/yuichi10/edinet_search/db"
	"github.com/yuichi10/edinet_search/graph/model"
)

func convertCompany(c db.Companies) *model.Company {
	return &model.Company{
		DocID:               c.DocID,
        SecCode:             c.SecCode,
        FilerName:           c.FilerName,
        DocDescription:      c.DocDescription,
        SubmitDatetime:      c.SubmitDatetime,
        AvgAge:              c.AvgAge,
        AvgYearOfService:    c.AvgYearOfService,
        AvgAnnualSalary:     c.AvgAnnualSalary,
        NumberOfEmployees:   c.NumberOfEmployees,
        EmployeeInformation: c.EmployeeInformation,
	}
}

func convertCompanies(cs []db.Companies) []*model.Company {
	var companies []*model.Company
	for _, c := range cs {
		companies = append(companies, convertCompany(c))
	}
	return companies
}

// Companies is the resolver for the Companies field.
func (r *queryResolver) Companies(ctx context.Context, filter *model.CompanyFilter) ([]*model.Company, error) {
	var filerName, avgAnnualSalary string
	if filter.FilerName != nil {
		filerName =  *filter.FilerName
	}
	if filter.AvgAnnualSalary != nil {
		avgAnnualSalary = *filter.AvgAnnualSalary
	}
	companies, err := db.GetCompanies(filerName, avgAnnualSalary)
	return convertCompanies(companies), err
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
